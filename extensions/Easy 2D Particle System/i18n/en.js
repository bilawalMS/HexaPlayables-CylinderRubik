"use strict"; 
module.exports = { 
    open_panel: "Default panel", 
    send_to_panel: "Send message to panel", 
    description: "Extension containing a panel developed based on Vue3.x",
    easy_p2d: "Easy 2D Particle System",

    editor_panel_name: "Mode editor",
    install_sample: "Install sample",

    enabled: "Enabled",
    system: {
        delay: "Emitter launch delay, delay if greater than 0",
        duration: "Emitter lifetime, in seconds, -1 means continuous emission",
        emissionRate: "Number of particles emitted per round",
        emitTurnDuration: "Duration of each round of emission, in seconds, 0 means one-time emission",
        totalParticles: "Maximum number of particles",
        startLifeTime: "Particle lifetime, in seconds",
        preview: "View particle effects",
        playOnLoad: "If set to true, particles will be automatically emitted at runtime",
        autoRemoveOnFinish: "Automatically destroy the node where the particles are after they finish playing",
        startColor: "Initial color of particles",
        fireAngle: "Emission angle, in degrees, 0 degrees means to the right, 90 degrees means upwards",
        startAngle: "Initial rotation angle of particles, in degrees",
        rotationType: "Particle rotation type None: No rotation, MoveDir: Execute moving direction, FireDir: Point to initial emission direction",
        startSize: "Initial size of particles",
        startScaleX: "Initial X-axis scale ratio of particles",
        startScaleY: "Initial Y-axis scale ratio of particles",
        shapeMode: "Particle emission shape type None: No type, Rect: Rectangle, Circle: Circle",
        sourcePos: "Position of particle emitter",
        rangeSize: "Range size of particle emitter",
        positionType: "Particle position type Free: Free mode, RELATIVE: Only move with parent node, Grouped: Group mode",
        emitterMode: "Particle emission mode None: None, Gravity: Gravity mode, Target: Target mode",
        gravity: "Gravity parameter, effective when the mode is gravity mode, x represents gravity in the x direction, y represents gravity in the y direction",
        startSpeed: "Initial speed of particles in the emission direction",
        velocityType: "Particle velocity type StartDirection: Move in the direction of the line connecting the starting position and the origin, FireDirection: Move along the initial angle direction",
        tangentialAccel: "Particle tangential acceleration, i.e., acceleration perpendicular to the relative direction of advance",
        radialAccel: "Particle radial acceleration, i.e., acceleration along the relative direction of advance",
        targetTimeRate: "In target mode, the time ratio of moving to the target point",
        accelRelativeDir: "Acceleration relative direction, FireDir: Point to initial emission direction, MoveDir: Execute moving direction, CenterDir: Center point points to particle",

        timer: "Time module",
        colorOvertime: "Color changes over time module",
        angleOvertime: "Angle changes over time module",
        sysAngleOvertime: "System angle changes over time module",
        sizeOvertime: "Size changes over time module",
        speedOvertime: "Speed changes over time module",
        imageEmitter: "Image emitter module",
        pathEmitter: "Shape emitter module",
        animation: "Frame animation module",
        pathOvertime: "Path changes over time module",
        trail: "Trail module",
    },

    timer: {
        delay: "Emitter launch delay curve, delay if greater than 0, overrides default delay",
        timeOffset: "Emitter launch time offset curve",
        duration: "Emitter lifetime curve, in seconds, -1 means continuous emission, overrides default lifetime",
        emitTurnDuration: "Duration of each round of emission curve, in seconds, 0 means one-time emission, overrides default duration",
        updateSwapTimeOnEmit: "Whether to update active and dormant time at emission",
        enbleTimeSwap: "Whether to enable active and dormant time switching",
        turnAwakeTime: "Active time curve",
        turnSleepTime: "Dormant time curve",
    },

    colorOvertime: {
        color: "Color changes over time curve",
    },

    angleOvertime: {
        angle: "Angle changes over time curve",
        byIncrement: "Whether to calculate by increment, the increment value is calculated at emission",
        increment: "Increment changes over emission time curve",
        scale: "Angle scale curve",        
    },

    sysAngleOvertime: {
        speed: "Rotate speed",
        scale: "Angle scale curve",
        angle: "Angle changes over time curve",
        byIncrement: "Whether to calculate by increment, the increment value is calculated at emission",
        increment: "Increment changes over emission time curve",
        space: "Angle space, World: world coordinates, Local: local coordinates",
    },

    sizeOvertime: {
        isScale: "Whether it is scale mode, otherwise it is size mode",
        size: "Size changes over time curve",
        byIncrement: "Whether to calculate by increment, the increment value is calculated at emission",
        increment: "Increment changes over emission time curve",
        enableScaleX: "Whether to enable X-axis scaling",
        scaleX: "X-axis scale curve",
        enableScaleY: "Whether to enable Y-axis scaling",
        scaleY: "Y-axis scale curve",
    },

    speedOvertime: {
        speed: "Speed changes over time curve",
        isScale: "Whether it is scale mode, otherwise it is size mode",
        byIncrement: "Whether to calculate by increment, the increment value is calculated at emission",
        increment: "Increment changes over emission time curve",
        scale: "Speed scale curve",
    },

    imageEmitter: {
        texture: "Image emitter texture, no need to be too large, it is recommended not to exceed 256x256",
        scale: "Emitter scale ratio",
        flipY: "Whether to flip Y-axis",
        noise: "Noise intensity, 0 means no noise",
        expansion: "Diffusion type, None: No diffusion, Random: Random diffusion, Out: Outward diffusion, In: Inward diffusion",
        updateDirection: "Whether to update particle direction, if set to true, the particle direction will be updated in update, otherwise it will be updated at emission",
    },

    pathEmitter: {
        poses: "Sequence point list of shape emitter",
        scale: "Emitter scale ratio",
        online: "Whether to show online",
        closed: "Whether to close",
        noise: "Noise intensity, 0 means no noise",
        expansion: "Diffusion type, None: No diffusion, Random: Random diffusion, Out: Outward diffusion, In: Inward diffusion",
        updateDirection: "Whether to update particle direction, if set to true, the particle direction will be updated in update, otherwise it will be updated at emission",
        curveMode: "Whether it is curve mode, otherwise it is straight line mode",
    },

    animation: {
        circles: "Number of cycles in the particle lifecycle",
        tiles: "Number of rows and columns of the frame",
        frameNum: "Total number of frames of the frame, 0 means automatic calculation",
        startFrame: "Starting frame of the frame",        
    },

    pathOvertime: {
        poses: "Path point list",
        targetTimeRate: "In time mode, the time ratio of moving to the target point",
        repeat: "In time mode, the number of repetitions",
        reverse: "Whether to reverse",
        useTimeMode: "Whether to use time mode, otherwise use speed mode",
        curveMode: "Whether it is curve mode, otherwise it is straight line mode",
    },

    trail: {
        maxParticleCount: "Maximum particle count, adjust according to the effect to prevent vertex number exceeding the limit",
        minLength: "Minimum length",
        colorGradient: "Color gradient",
        widthCurve: "Width curve",
        renderFrame: "Trail texture, needs to be in the same atlas with the particle texture",
        particleAliveTime: "Particle survival time",
        showMainParticle: "Whether to show the main particle",
        space: "Trail particle coordinate space, World: world coordinates, Local: local coordinates",
        useVerticalUVLayout: "Whether to use vertical UV layout",
        useParticleSpriteFrame: "Whether to use the particle texture",
        useParticleColor: "Whether to use particle color",
        useParticleSize: "Whether to use particle size, if the initial size is 0, it will default to 1",
    },
};